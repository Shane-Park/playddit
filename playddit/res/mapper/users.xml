<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap
	PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
	"http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace = "users">
	<select id="selectAll" resultClass="UsersVO">
		select user_id
		from users
	</select>
	
	<select id="loadSomeonesProfile" parameterClass="map" resultClass="ProfileVO">
		select user_id, user_nickname,class_id, nvl(user_pic, 'default.png') as user_pic,
		    (select count(*) from follow where follower=users.user_id) as following,
		    (select count(*) from follow where followee=users.user_id) as follower,
		    (select class_title ||' '|| class_num || ' - ' || class_room
		       from class
		      where class_id = (select class_id from users where user_id=#target_id#)) as className1,
		    (select count(*) from follow where followee=users.user_id) as follower,
		    (select class_num || ' - ' || class_room
		    from class
		    where class_id = (select class_id from users where user_id=#target_id#)) as className2,
		    (select count(*)
		    from feed
		    where feed.user_id = users.user_id) as allFeed,
		    user_bio, user_birth, user_tel, user_name,
		    (select count(*) 
		        from follow
		        where follower = #user_id#
		            and followee = #target_id#) as amIfollowing
		from users
		where user_id = #target_id#
	</select>
	
	<!-- 아이디 중복체크 -->
	<select id="selectById" resultClass="String" parameterClass="String">
		select user_id from users
		where user_id = #user_id#
	</select>
	
	<!-- 팔로잉 목록 출력 -->
	<select id="followingList" resultClass="followerVO" parameterClass="String">
		select user_id as id, user_nickname as nickname,
        (select class_num ||' - ' || class_room from class where class_id=users.class_id) as department,
        nvl(user_pic,'default.png') as profile,
        (select count(*) from follow where follower = #user_id# and followee = users.user_id) as followback
		from users
		where user_id in (select followee
                from follow
                where follower = #user_id#)
	</select>
	<!-- 팔로워 목록 출력 -->
	<select id="followerList" resultClass="followerVO" parameterClass="String">
		select user_id as id, user_nickname as nickname,
        (select class_num ||' - ' || class_room from class where class_id=users.class_id) as department,
        nvl(user_pic,'default.png') as profile,
        (select count(*) from follow where follower = #user_id# and followee = users.user_id) as followback
		from users
		where user_id in (select follower
                from follow
                where followee = #user_id#)
        order by followback desc
	</select>
	
	<select id="getGroupInfo_class" resultClass="groupVO" parameterClass="String">
		select class_num ||' - '|| class_room as name, a.class_id as groupId,
		    (select count(*) from users where class_id =a.class_id) as num
		from class a, users b
		where a.class_id = b.class_id
		and b.user_id = #user_id#
	</select>
	
	<insert id="followUser" parameterClass="map">
		insert into follow 
		(follow_no, follower, followee)
		values(follow_no_seq.nextval, #follower#, #followee#)
	</insert>
	
	<delete id="unfollowUser" parameterClass="map">
		delete from follow
		where follower = #follower#
		and followee = #followee#
	</delete>
	
	<!-- 아이디 & 비밀번호 일치 여부 -->
	<select id="match" resultClass="UsersVO" parameterClass="map">
		select user_id, user_password, user_nickname
 		 from users
         where user_id=#user_id# and user_password=#user_pw#
	</select>
	
	<!--  위의 쿼리와 거의 동일 -->
	<select id="selectMemberForAuth" resultClass="UsersVO" parameterClass="String">
		select user_id, user_password, user_nickname
 		 from users
         where user_id=#user_id#
	</select>
	
	<!-- 닉네임 중복검사 -->
	<select id="selectByNick" resultClass="String" parameterClass="String">
		select user_nickname
		  from users
		 where user_nickname = #user_nickname#
	</select>
	
	<!-- 비밀번호 변경 -->
	<update id="setNewPass" parameterClass="map">
		update users
		set user_password = #password#
		where user_id = #email#
	</update>
	
	<!-- 프로필 사진 변경 -->
	<update id="setUserPic" parameterClass="map">
		update users
		set user_pic = #user_pic#
		where user_id = #user_id#
	</update>

	<!-- 유저 등급 변경 -->
	<update id="setUserRate" parameterClass="map">
		update users 
		set user_rating = #user_rating#
		where user_id = #user_id#
	</update>
	
	<!-- 학급 정보 변경 -->
	<update id="setUserClass" parameterClass="map">
		update users
		set class_id = #class_id#
		where user_id = #user_id#
	</update>
	
	<!-- 반장, 담임선생님 목록 불러오기 -->
	<select id="getRightHolders" resultClass="String" parameterClass="String">
		select user_id
		from users 
		where user_rating >1 
		    and class_id = #class_id#
	</select>
	
</sqlMap>

